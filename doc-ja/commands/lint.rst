=================
``lint`` コマンド
=================

実際にドキュメントの検査を行うコマンド。

概要
====

``docan`` の中核として、実際にドキュメントを指定して、検査を行う。
検査内容は設定ファイルに基づき、最終的に結果を出力する。

フローチャート
==============

.. blockdiag::

    diagram {
      orientation = portrait;

      begin [shape = flowchart.terminator];
      end [shape = flowchart.terminator];

      init [shape = box];
      parse [shape = flowchart.input, stacked];
      lint [shape = box, stacked];
      report [shape = flowchart.input];

      begin -> init -> parse -> lint -> report -> end;
    }

.. list-table:: 各フローの概要
    :widths: 10, 20, 70
    :header-rows: 1

    * - プロセス
      - 回数
      - 概要
    * - ``init``
      - 1回のみ
      - 初期化。設定ファイルの読み込みを行い、本体やルールのセットアップを行う。
    * - ``parse``
      - ファイル数分
      - 対象ドキュメントのパース。
        引数と設定に従い、ターゲットとなるドキュメントの読み込みを行う。
    * - ``lint``
      - ファイル * ルール
      - 対象ドキュメントの解析。(ドキュメント,ルール)の組み合わせで検査を実行する。
        実行結果を収集する。
    * - ``report``
      - 1回の想定
      - 結果の出力。実行結果を指定されたフォーマットで出力する。

フロー内詳細
============

``init``
--------

初期処理。

設定内容に基づいて、コアエンジンとルールのセットアップを行う。
何らかの理由で設定通りのセットアップが出来ない場合は、
エラー処理を行いプロセス全体を異常終了させる。

#. 引数の処理をする。
#. 設定ファイルの探索をする。
#. 設定ファイルの読み込み、Configオブジェクトを組み立てる。
#. Configオブジェクトをもとに、コアエンジン・ルール等のセットアップを実施する。

``parse``
---------

検査対象のドキュメント読み込み。

コマンドライン引数と設定をもとに、対象となるソースを探索する。
対象となる全ファイルに対して、所定のプロセスに従いファイルの読み込み・パースを実行する。
ファイルが存在しない場合は、エラー処理を行いプロセス全体を異常終了させる。

#. （コマンドライン引数での対象指定がディレクトリの場合）対象ファイルを探索する。
#. 全ての対象ファイルを読み込み、 ``docutils`` の ``document`` オブジェクトにする。

``lint``
--------

ルールによる検査。

全ドキュメントに対して、各ルールに基づいた検査を行う。
検査による実行結果は、レポートとして引き渡される。
検査処理のエラーに関しては、原則としてレポートと同等の扱いとする。

(全てのドキュメント*ルールに対して、下記を実施)

#. ルールプロセスに対して、ドキュメントを引き渡す。
#. ルールプロセスは、ドキュメントに対して定義済の検査処理を実行する。
#. 結果をコアエンジンに引き渡す。

``report``
----------

結果出力。

``lint`` において引き渡されたレポートを集約整理して、出力する。
出力方法は設定に基づいて決定される。
